// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  name     String
  email    String    @unique
  password String
  subjects Subject[]
  classes  Classes[]  @relation("ClassOwner") 
  memberOf Classes[] @relation("ClassMembers") // Clas

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id          Int      @id @default(autoincrement())
  code        String   @unique @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Brand {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  brandcode      String?         @unique
  brandPassword  String?
  contactNumber  String?
  website        String?
  logoUrl        String?
  description    String?
  category       String?
  location       String?
  sublocation    String?
  verified       Boolean         @default(false)
  active         Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  advertisements Advertisement[]
}

model Advertisement {
  id        String    @id @default(uuid())
  title     String
  content   String?
  imageUrl  String?
  startDate DateTime?
  endDate   DateTime?
  links     String?
  createdAt DateTime  @default(now())
  brandId   String
  brand     Brand     @relation(fields: [brandId], references: [id])
}

model Classes {
  id            String         @id @default(uuid())
  name          String?
  section       String
  room          String
  subject       String
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation("ClassOwner", fields: [userId], references: [id])
  members       User[]         @relation("ClassMembers")
  adminList     String[]
  announcements Announcement[]

  assignments Assignment[]


}

model Member {
  id        String  @id @default(uuid())
  classesId String?
}

model Announcement {
  id          String   @id @default(uuid())
  classId     String
  classes     Classes  @relation(fields: [classId], references: [id])
  category    String
  title       String
  description String?
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Assignment {
  id          String    @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  attachments String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  classId     String
  class       Classes   @relation(fields: [classId], references: [id], onDelete: Cascade)
}
